# -*- coding: utf-8 -*-
"""Genetics_HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4OmCt5JSQNO2_1cu9lxIj7Wfr9XbX6V

Installing the Libraries
"""

#installing the pyeasyga library
!pip install pyeasyga

"""Importing"""

#importing the pyeasyga library into code
from pyeasyga import pyeasyga

#getting the values for balance, picture, kg of cake, candle, hat, balloon, reservation, and gift
balance = input('Please enter your balance: ')
value_1 = input('Please enter value 1: ')
value_2 = input('Please enter value 2: ')
value_3 = input('Please enter value 3: ')
value_4 = input('Please enter value 4: ')
value_5 = input('Please enter value 5: ')
value_6 = input('Please enter value 6: ')
value_7 = input('Please enter value 7: ')

"""Setting Up Data"""

'''defining variables a to f for multiplying input values of cake and gift by 2 or 3 or 4 based on the gift number or kg of cake 
as for example gift number 2 is choosen, we get the value of input value * 2 and furthermore '''
a = int(value_7) 
b = int(value_7)*2
c = int(value_7)*3
d = int(value_7)*4
e = int(value_2)
f = int(value_2)*2
g = int(value_2)*3
#here we define a dictionary to have easy access to key and value names like we can use data[6].get('values') to access the value of line 7 by just it's name
#when defining dictionary, we have this format : (key(i) : value(i))
#also we convert all inputs to integeres to be sure it acts as a integer number while calculating functions
'''we assuem 2 bits for both gifts and cakes it can have 4 conditions, for example for gifts, 1 is selecting just gift1 , 2 is selecting just gift2, 
3 is just gift3, and 4 is selecting just gift 4. with this format we can have multiple states of gifts considered without defining each of them separately 
and it can calculate all 4 gifts in the fitness function and choose just one of them '''
#also we define 'but_gift' with 0 values and 0 cost as a variable to show that we should or shouldn't choose buying any gifts
data = {'picture': {'value': int(value_1), 'cost': 50},
        'cake1': {'value': e, 'cost': 250, 'number': 1},
        'cake2': {'value': f, 'cost': 500, 'number': 2},
        #'cake3': {'value': g, 'cost': 750},
        'candle': {'value': int(value_3), 'cost': 30},
        'hat': {'value': int(value_4), 'cost': 60},
        'balloon': {'value': int(value_5), 'cost': 40},
        'reserve': {'value': int(value_6), 'cost': 300},
        'gift1': {'value': a, 'cost': 350, 'number': 1},
        'gift2': {'value': b, 'cost': 500, 'number': 2},
        #'gift3': {'value': c, 'cost': 750},
        #'gift4': {'value': d, 'cost': 1000}
        'buy_gift': {'value': 0, 'cost': 0},
        }

"""Getting Values of Dict"""

#this is just was for testing what is the output of each line 
#data[6].get('value')

"""Defining Fitness Function"""

#we define all costs of 4 gifts and their values in 2 separate lists
gift_costs = [350, 500, 750, 1000]
gift_values = [a, b, c, d]
#we define fitness function here as it uses both our data dictionary and also individual random chromosomes
def fitness(individual, data):
  #when defining variables, we assign the initial values to 0
  values = 0
  costs = 0
  gift_code = 0
  cake_weight = 0
  necessary_items= True
  buy_gift = False

  for selected, item_name in zip(individual, data):
    if item_name[0:4] not in ['cake', 'gift', 'buy_'] and data[item_name].get('value') > 90 and not selected:
      necessary_items = False
    if selected and item_name[0:4] != 'gift':
      cost_ = data[item_name].get('cost')
      costs += cost_ 
      value_ = data[item_name].get('value')
      values += value_
    
    if selected and item_name[0:4] == 'gift':
      gift_code += data[item_name].get('number')
    if selected and item_name[0:4] == 'cake':
      cake_weight += data[item_name].get('number')
    if selected and item_name[0:3] == 'buy':
      buy_gift = True
  #we say if buy_gift because we want to calculate gifts' values and costs just when we should buty gifts 
  #we define values and costs variables as a variable to calculate the totall amount of gift values and costs, respectively
  if buy_gift:
    values += gift_values[gift_code]
    costs += gift_costs[gift_code]
  '''as a hypothesis in HW pdf, when the totall cost of choosen items be over the initial balance of card, we return 0 for values as the worst 
  fitness in fitness function to not consider it at all'''
  if costs > int(balance):
    values = 0

  if cake_weight == 0:
      necessary_items = False
  if data['gift1'].get('value') > 90 and not buy_gift:
    necessary_items = False

  if not necessary_items:
      return 0
  return values

"""Running Genetics Algorithm"""

#here we apply our pyeasyga on our data
ga = pyeasyga.GeneticAlgorithm(data)
#we assigns our fitness value to the initial value of fitness function of pyeasyga library
ga.fitness_function = fitness
#here it runs all the codes of the library to execute and outputs the best individual found
ga.run()
print(ga.best_individual())

#if we look up the codes of this library we can see the first output number before the best individual list is maximum value
max_value = ga.best_individual()[0]
#we assign the best individual which is a list to best_solution for further usage
best_solution = ga.best_individual()[1]
#we if best_solution[2] or cake 2 is 1 it means it actually is 3 kgs of cake so we multiple by 2
best_solution[1]+= 2*best_solution[2]
'''here we assign the output number of gift 2 and multiple it by 2(similar to cake 1 means 2 as it is the second bit) and we add it to the initial value of gift 1 
to show which gift should be choosen and in the end, we multiple it by best_solution[9] or buy_gift value because when buy_gift value is 0, it turns
all the output to 0 then it shows 0 for gifts which means we should not buy any gifts'''
best_solution[7]= (best_solution[7] + 2*best_solution[8]+1) * best_solution[9]
#here we delete cake 2 and gift 2 and by gift values from the best solution to have similar to HW description output which is 7 numbers
best_solution.pop(9)
best_solution.pop(8)
best_solution.pop(2)

#here we say if there was no output as best solution either maximum value was 0, this answer is impossible and we print mission failed
if best_solution == [] or max_value == 0:
  print('--Mission Failed--')
#for better understanding of the output numbers, we print the maximum values and the best solution as a list in two separate lines
print('max value:  ', max_value)
print('best_solution:  ', best_solution)